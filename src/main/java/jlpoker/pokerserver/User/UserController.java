package jlpoker.pokerserver.User;

import com.fasterxml.jackson.annotation.JsonFormat;
import jlpoker.pokerserver.Table.PokerTable;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController
{
   @Autowired // This means to get the bean called userRepository
   // Which is auto-generated by Spring, we will use it to handle the data
   private UserRepository userRepository;

   Map<String, User> newUsers = new HashMap<>();

   Map<Integer, User> loggedInUsers = new HashMap<>();

   @PostMapping(path="/add", consumes="application/json") // Map ONLY POST Requests
   public @ResponseBody User addNewUser (@RequestBody User user) {
      System.out.println("add new");
      // @ResponseBody means the returned String is the response, not a view name
      // @RequestParam means it is a parameter from the GET or POST request

      System.out.println(user);
      System.out.println(user.getId());
      userRepository.save(user);

      return user;
   }

   @GetMapping(path="/all")
   public @ResponseBody Iterable<User> getAllUsers() {
      // This returns a JSON or XML with the users
      return userRepository.findAll();
   }

   @GetMapping(path="/id/{id}")
   @ResponseBody
   public Optional<User> getByID(@PathVariable String id)
   {
      //System.out.println("ID: " + id + "\n" + userRepository.findById(id));
      System.out.println(userRepository.count());
      Optional<User> user = userRepository.findById(Integer.valueOf(id));
      System.out.println(user.isPresent());
      return userRepository.findById(Integer.valueOf(id));

   }

   @GetMapping(path="email/{email}")
   @ResponseBody
   public Optional<User> findByEmail(@PathVariable String email)
   {
      return userRepository.findByEmail(email);
   }
}
